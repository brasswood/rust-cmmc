# Casting of a binary operand
#  - Casting in pointer arithmetic as well
# Casting in an assign operator
# Casting in function calls
# Casting in returns


bool takes_int(int a) {
    return a < 100;
}

short returns_short(bool neg) {
    if (neg) {
        return -56S;
    } else {
        return 13S;
    }
}

int main() {
    # Binary operand
    write "Binary Operand Test";
    int a;
    int b;
    short c;
    b = 223;
    c = 120S;
    a = b + c;
    write "\na is (expect 343): ";
    write a;
    a = c - b;
    write "\na is (expect -103): ";
    write a;
    a = b * c;
    write "\na is (expect 26,760): ";
    write a;
    a = b / c;
    write "\na is (expect 1): ";
    write a;

    # pointers
    write "\n\nPointer Test";
    ptr int d;
    d = &a;
    write "\nvalue at d is (expect 1): ";
    write @d;
    d = d + (-8S);
    write "\nvalue at d is (expect 223): ";
    write @d;

    # Assign operator
    write "\n\nAssign Operator Test";
    int e;
    e = 2S;
    write "\ne is (expect 2): ";
    write e;
    e = -3S;
    write "\ne is (expect -3): ";
    write e;
    e = 2S - 3S;
    write "\ne is (expect -1): ";
    write e;
    e = 40S * 40S; # should cause overflow before casting
    write "\n(overflow) e is (expect -52): ";
    write e;
    e = 2S * -20S;
    write "\ne is (expect -40): ";
    write e;
    e = 20S / 2S;
    write "\ne is (expect 10): ";
    write e;

    # Function args
    write "\n\nFunction Args Test";
    write "\ntakes_int(120S) is (expect false): ";
    write takes_int(120S);
    write "\ntakes_int(-120S) is (expect true): ";
    write takes_int(-120S);

    # Return
    int f;
    write "\n\nReturn Test";
    write "\nf = returns_short(true) is (expect -56): ";
    write f = returns_short(true);
    write "\nf = returns_short(false) is (expect 13): ";
    write f = returns_short(false);

    write "\n";
}